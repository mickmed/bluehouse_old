[{"/home/mick/apps/bluehouse/client/src/index.js":"1","/home/mick/apps/bluehouse/client/src/App.js":"2","/home/mick/apps/bluehouse/client/src/Components/Header.jsx":"3","/home/mick/apps/bluehouse/client/src/Components/Home.jsx":"4","/home/mick/apps/bluehouse/client/src/Components/Layout.jsx":"5","/home/mick/apps/bluehouse/client/src/Data/categories.js":"6","/home/mick/apps/bluehouse/client/src/Components/services/items.js":"7","/home/mick/apps/bluehouse/client/src/Components/services/apiConfig.js":"8","/home/mick/apps/bluehouse/client/src/Components/alphaSort.js":"9"},{"size":521,"mtime":1632579578557,"results":"10","hashOfConfig":"11"},{"size":473,"mtime":1632582501152,"results":"12","hashOfConfig":"11"},{"size":124,"mtime":1632579783993,"results":"13","hashOfConfig":"11"},{"size":17352,"mtime":1640894287731,"results":"14","hashOfConfig":"11"},{"size":130,"mtime":1632579471350,"results":"15","hashOfConfig":"11"},{"size":257,"mtime":1637457902323,"results":"16","hashOfConfig":"11"},{"size":1693,"mtime":1640919824068,"results":"17","hashOfConfig":"11"},{"size":605,"mtime":1640919760632,"results":"18","hashOfConfig":"11"},{"size":857,"mtime":1639279241148,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1tr71gy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mick/apps/bluehouse/client/src/index.js",[],["41","42"],"/home/mick/apps/bluehouse/client/src/App.js",[],"/home/mick/apps/bluehouse/client/src/Components/Header.jsx",[],"/home/mick/apps/bluehouse/client/src/Components/Home.jsx",["43","44","45","46","47","48"],"\nimport { useEffect, useState } from 'react'\nimport { getItemById, createItem, updateItem, deleteItem, getItems, getItemsWithOffset, getCategories } from './services/items'\n\nconst Home = () => {\n    const [item, setItem] = useState({})\n    // const [amount, setAmount] = useState('')\n    const [categories, setCategories] = useState([])\n    const [checked, setChecked] = useState({})\n    const [items, setItems] = useState([])\n    const [editMode, setEditMode] = useState(false)\n    const [currentItem, setCurrentItem] = useState({})\n    const [selected, setSelected] = useState()\n    const [sortKey, setSortKey] = useState('')\n    const [sortDir, setSortDir] = useState(true)\n    const [offset, setOffset] = useState(' ')\n    const [filteredItems, setFilteredItems] = useState([])\n    const [attTotals, setAttTotals] = useState({})\n\n    useEffect(() => {\n        const getAllCategories = async () => {\n            await getCategories()\n                .then(res =>\n                    res.status === 200\n                        ? setCategories([...categories, ...res.data.records])\n                        : null\n                )\n                .catch(console.error)\n        }\n        getAllCategories()\n    }, []);\n\n    useEffect(() => {\n\n        getAllItems()\n    }, [])\n\n    useEffect(() => {\n        const getAllItems = async () => {\n\n            if (items.length % 100 === 0) {\n                let resp = await getItemsWithOffset(offset)\n                setItems([...items, ...resp.data.records])\n\n                if (resp.data.records.length === 100) {\n                    setOffset(resp.data.offset)\n                }\n            }\n        }\n        getAllItems()\n    }, [offset])\n\n    const getAllItems = async () => {\n        let resp = await getItems()\n        if (resp.data.records.length === 100) {\n            setItems(resp.data.records)\n            setOffset(resp.data.offset)\n            setFilteredItems([])\n            setAttTotals({})\n        }\n    }\n\n    const handleChange = (e) => {\n        let key, value, newItem\n        if (e.target.type === 'checkbox') {\n            newItem = { ...currentItem }\n            if (editMode) {\n\n                if ('categories' in newItem.fields) {\n                    if (e.target.checked) {\n                        newItem.fields.categories.push(e.target.id)\n                    } else {\n                        console.log('false')\n                        const index = newItem.fields.categories.indexOf(e.target.id)\n                        newItem.fields.categories.splice(index, 1)\n                    }\n                } else {\n                    newItem.fields.categories = [e.target.id]\n                }\n            } else {\n                newItem = { ...item }\n                console.log('not edit')\n                if ('categories' in newItem) {\n                    console.log('remove nw')\n                    e.target.checked ? newItem.categories.push(e.target.id) :\n                        newItem.categories.splice(newItem.categories.indexOf(e.target.id), 1)\n\n                } else {\n                    console.log('new')\n                    newItem.categories = [e.target.id]\n                }\n\n                console.log(newItem)\n            }\n\n            editMode ?\n                setCurrentItem(newItem) :\n                setItem(newItem)\n\n        } else {\n            key = e.target.name\n            value = e.target.value\n\n            editMode ?\n                setCurrentItem({ ...currentItem, fields: { ...currentItem.fields, [key]: value } }) :\n                setItem({ ...item, [key]: value })\n        }\n    }\n\n    const handleUpdate = async (e, id, i) => {\n        const current = await getItemById(id)\n        setCurrentItem(current)\n        setSelected(i)\n        setEditMode(true)\n    }\n\n    const handleSubmit = async (e, id) => {\n        e.preventDefault()\n        const { name, amount, vendor, categories, date, purchaser } = editMode ? currentItem.fields : item\n        const newItem = {\n            name: name,\n            amount: parseFloat(amount),\n            vendor: vendor,\n            categories: categories,\n            date: date,\n            purchaser: purchaser\n        }\n        if (editMode) {\n            const updatedItem = await updateItem(newItem, id)\n            const newItems = [...items.map((el, i) => el.id === id ? updatedItem[0] : el)]\n            setItems(newItems)\n            setEditMode(false)\n            setItem({})\n            setSelected()\n        } else {\n            const postedItem = await createItem(newItem)\n            setItems([...items, ...postedItem.records])\n\n        }\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        deleteItem(id)\n        let filteredItems = [...items].filter(el => el.id !== id)\n        setItems(filteredItems)\n    }\n    const alphaSort = (array, sortParam) => {\n        const compare = (a, b) => {\n            let paramA\n            let paramB\n            if (sortParam === 'date') {\n                paramA = Date.parse(a.fields[sortParam])\n                paramB = Date.parse(b.fields[sortParam])\n\n            } else {\n\n                paramA = a.fields[sortParam]\n                paramB = b.fields[sortParam]\n            }\n            if (sortDir) {\n\n                if (paramA < paramB) {\n                    return -1;\n                }\n                if (paramA > paramB) {\n                    return 1;\n                }\n            } else if (Object.keys(array[0].fields).includes('vendor')) {\n\n                if (paramA > paramB) {\n                    return -1;\n                }\n                if (paramA < paramB) {\n                    return 1;\n                }\n\n            }\n            return 0;\n\n        }\n        array.sort(compare)\n        return array\n\n    }\n\n    const sortObject = (obj, att) => {\n        if (att !== 'amount') {\n            let sortedObj = Object.keys(obj).sort().reduce(function (result, key) {\n                result[key] = obj[key];\n                return result;\n            }, {});\n            setAttTotals(sortedObj)\n\n        } else {\n            let sortable = [];\n            for (let amount in obj) {\n                sortable.push([amount, obj[amount]]);\n            }\n            sortable.sort(function (a, b) {\n                return a[1] - b[1];\n            });\n\n            let objSorted = {}\n            sortable.forEach(function(item){\n                objSorted[item[0]]=item[1]\n            })\n            setAttTotals(objSorted)\n            setSortDir(!sortDir)\n        }\n\n\n\n\n\n\n\n    }\n\n\n\n    const sortByHeader = (key) => {\n        setSortKey(key)\n        setSortDir(!sortDir)\n    }\n\n    const filterResults = async (key) => {\n        let filterItems = items.filter((e, i) => {\n            return e.fields.purchaser === key\n        })\n        setFilteredItems(filterItems)\n    }\n\n    const filterNames = (key) => {\n\n        let obj = {}\n        let keys = items.map((e) => {\n            return key === 'categories' ? e.fields[key][0] : e.fields[key]\n        })\n\n        let uniqueItems = [...new Set(keys)]\n        let totalAtt\n        uniqueItems.map(e => {\n            if (key === 'categories') {\n                totalAtt = categories.filter(g => e === g.id)\n                totalAtt = totalAtt[0].fields.name\n            } else {\n                totalAtt = e\n            }\n            obj[totalAtt] = 0\n            items.map(f => {\n                if (key === 'categories') {\n                    if (f.fields[key][0] === e) {\n                        obj[totalAtt] += f.fields.amount\n                    }\n                } else {\n                    if (f.fields[key] === e) {\n                        obj[totalAtt] += f.fields.amount\n                    }\n                }\n\n\n\n            })\n        })\n        setAttTotals(obj)\n    }\n\n\n\n    const { date, vendor, name, amount, purchaser } = editMode ? currentItem.fields || '' : item\n    const cats = editMode ? currentItem.fields.categories || [] : item.categories || []\n    let total = 0\n    let lyssieTotal = 0\n    let marcaTotal = 0\n\n\n    return (\n        <div>\n            <div className='home'>\n\n                <form style={editMode ? { background: '#f9c3c3' } : {}} onSubmit={(e) => handleSubmit(e, editMode ? currentItem.id : null)}>\n                    <label for={item.date}>Date</label>\n                    <input\n                        className='date'\n                        name='date'\n                        id={item.date}\n                        type='date'\n                        value={date || ''}\n                        onChange={handleChange}\n\n                    />\n                    <label for={item.vendor}>Vendor</label>\n                    <input\n                        className='vendor'\n                        name='vendor'\n                        id={item.vendor}\n                        type='text'\n                        value={vendor || ''}\n                        onChange={handleChange}\n\n                    />\n                    <label for={item.name}>Item</label>\n                    <input\n                        className='name'\n                        name='name'\n                        id={item.name}\n                        type='text'\n                        value={name || ''}\n                        onChange={handleChange}\n\n                    />\n                    <label for={item.amount}>Amount</label>\n                    <input\n                        className='amount'\n                        name='amount'\n                        id={item.amount}\n                        type='number'\n                        step='0.01'\n                        value={amount || ''}\n                        onChange={handleChange}\n                    />\n                    <div>\n                        <label for={item.purchaser}>Lyssie</label>\n                        <input\n                            className='purchaser'\n                            name='purchaser'\n                            id={item.purchaser}\n                            type='radio'\n                            value={'Lyssie'}\n                            onChange={handleChange}\n                            checked={purchaser === 'Lyssie'}\n\n                        />\n                    </div>\n                    <div>\n                        <label for={item.purchaser}>Marca</label>\n                        <input\n                            className='purchaser'\n                            name='purchaser'\n                            id={item.purchaser}\n                            type='radio'\n                            value={'Marca'}\n                            onChange={handleChange}\n                            checked={purchaser === 'Marca'}\n\n                        />\n                    </div>\n                    <div className='categories'>\n                        {alphaSort(categories, 'name').map((e, i) => (\n                            <div key={i} className='category'>\n                                {/* {console.log(cats.includes(e.fields.name))}\n                            {console.log('e', e.fields.name)} */}\n                                {/* {console.log('here', cats.map(e=>Object.keys(e).toString() === e.fields.name))} */}\n                                <input\n                                    index={i}\n                                    className='category'\n                                    name={e.fields.name}\n                                    id={e.id}\n                                    type='checkbox'\n                                    checked={cats.includes(e.id) || false}\n                                    // onChange={e => setChecked({ ...checked, [e.target.id]: e.target.checked })}\n                                    onChange={handleChange}\n                                />\n                                <label key={i} for={e.id}>{e.fields.name}</label>\n\n                            </div>\n\n                        ))}\n                    </div>\n                    <input\n                        type='submit'\n                        value='submit'\n                    />\n                </form>\n                <div className='content'>\n                    <div className='details-header'>\n                        {\n                            Object.keys(attTotals).length ?\n                                <>\n                                    <p onClick={() => sortObject(attTotals, 'category')}>category</p>\n                                    <p onClick={() => sortObject(attTotals, 'amount')}>amount</p>\n\n                                </> :\n                                <>\n                                    <p onClick={() => sortByHeader('date')}>Date</p>\n                                    <p onClick={() => sortByHeader('vendor')}>Vendor</p>\n                                    <p onClick={() => sortByHeader('name')}>Name</p>\n                                    <p onClick={() => sortByHeader('amount')} className='amount'>Amount</p>\n                                    <p onClick={() => sortByHeader('purchaser')}>Purchaser</p>\n                                    <p>Categories</p>\n                                    <p>delete</p>\n                                </>\n                        }\n\n                    </div>\n\n\n\n                    <div className='results'>\n\n                        {Object.keys(attTotals).length ?\n                            Object.keys(attTotals).map(e => {\n                                total += parseInt(attTotals[e].toFixed(2))\n                                // lyssieTotal += parseFloat(e.fields.purchaser === 'Lyssie' ? e.fields.amount : 0)\n                                // marcaTotal += parseFloat(e.fields.purchaser === 'Marca' ? e.fields.amount : 0)\n                                return (\n                                    <div className='details'>\n                                        <p>{e}</p>\n                                        <p>{attTotals[e].toFixed(2)}</p>\n                                    </div>\n                                )\n\n                            }) :\n                            alphaSort(filteredItems.length ? filteredItems : items, sortKey).map((e, i) => {\n                                total += parseFloat(e.fields.amount)\n                                lyssieTotal += parseFloat(e.fields.purchaser === 'Lyssie' ? e.fields.amount : 0)\n                                marcaTotal += parseFloat(e.fields.purchaser === 'Marca' ? e.fields.amount : 0)\n\n                                let date = new Date(e.fields.date);\n                                date = new Date(date.getTime() + date.getTimezoneOffset() * 60000)\n                                return (\n                                    <div\n                                        className='details'\n                                        onClick={(evt) => handleUpdate(evt, e.id, i)}\n                                        style={selected === i ? { background: '#f9c3c3' } : {}\n                                        }>\n\n                                        <p>{new Date(date).toLocaleDateString()}</p>\n                                        <p>{e.fields.vendor}</p>\n                                        <p>{e.fields.name}</p>\n                                        <p className='amount'>{e.fields.amount.toFixed(2)}</p>\n                                        <p>{e.fields.purchaser}</p>\n\n                                        <div className='cats'>{categories.filter(el => e.fields.categories.includes(el.id)).map(f => <p>{f.fields.name}</p>)}</div>\n                                        <p onClick={(evt) => handleDelete(evt, e.id)}>X</p>\n\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n\n                    <div className='total-and-filters'>\n\n                        <div className='filters'>\n\n                            <div className='filters-buttons'>\n                                <button onClick={() => getAllItems()}>List</button>\n                                <button onClick={() => filterNames('vendor')}>Vendors</button>\n                                <button onClick={() => filterNames('categories')}>Categories</button>\n\n\n\n\n\n                            </div>\n                            {/* <div className='totals'>\n                                <div className='att-totals-list'>\n                                    {Object.keys(attTotals).sort().map(e => (\n                                        <div className='attTotals'><span>{e}</span><span>{attTotals[e].toFixed(2)}</span></div>\n                                    ))}\n                                </div>\n                            </div> */}\n                        </div>\n                        <div className='total'>\n                            <div><span onClick={() => filterResults('Lyssie')}>Lyssie</span><span>{lyssieTotal.toFixed(2)}</span></div>\n                            <div><span onClick={() => filterResults('Marca')}>Marca</span><span>{marcaTotal.toFixed(2)}</span></div>\n                            <div><span onClick={() => getAllItems()}>Total</span><span>{total.toFixed(2)}</span></div>\n                        </div>\n                    </div>\n\n\n\n                </div>\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Home","/home/mick/apps/bluehouse/client/src/Components/Layout.jsx",[],"/home/mick/apps/bluehouse/client/src/Data/categories.js",[],["49","50"],"/home/mick/apps/bluehouse/client/src/Components/services/items.js",[],"/home/mick/apps/bluehouse/client/src/Components/services/apiConfig.js",[],"/home/mick/apps/bluehouse/client/src/Components/alphaSort.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":9,"column":12,"nodeType":"57","messageId":"58","endLine":9,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":9,"column":21,"nodeType":"57","messageId":"58","endLine":9,"endColumn":31},{"ruleId":"60","severity":1,"message":"61","line":31,"column":8,"nodeType":"62","endLine":31,"endColumn":10,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":51,"column":8,"nodeType":"62","endLine":51,"endColumn":16,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":243,"column":27,"nodeType":"68","messageId":"69","endLine":243,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":251,"column":25,"nodeType":"68","messageId":"69","endLine":251,"endColumn":27},{"ruleId":"51","replacedBy":"70"},{"ruleId":"53","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'checked' is assigned a value but never used.","Identifier","unusedVar","'setChecked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'categories'. Either include it or remove the dependency array. You can also do a functional update 'setCategories(c => ...)' if you only need 'categories' in the 'setCategories' call.","ArrayExpression",["74"],"React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array. You can also do a functional update 'setItems(i => ...)' if you only need 'items' in the 'setItems' call.",["75"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["72"],["73"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [categories]",{"range":"80","text":"81"},"Update the dependencies array to be: [items, offset]",{"range":"82","text":"83"},[1214,1216],"[categories]",[1681,1689],"[items, offset]"]